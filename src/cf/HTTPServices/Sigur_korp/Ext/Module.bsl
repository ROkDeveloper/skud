
#Область Проходы

// Функция, возвращает разрешение на проход.
//
Функция GetAccessPOST(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстJSON = Запрос.ПолучитьТелоКакСтроку();
	
	ЗаписьЖурналаРегистрации("Sigur-GetAccess", УровеньЖурналаРегистрации.Информация,,,Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'") + Символы.ПС + ТекстJSON);
	
	ОбработчикДрайвера   = Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСКУДSigur_КОРП;
	ПараметрыПодключения = МенеджерОборудованияСКУД.ПолучитьПараметрыПодключенияСКУД(ОбработчикДрайвера);
	
	// Если настройки не заданы.
	Если ПараметрыПодключения = Неопределено Тогда				
		ЗаписьЖурналаРегистрации("Sigur", УровеньЖурналаРегистрации.Информация,,,"Не заданы настройки СКУД!");		
		
		Ответ1С = Новый Структура();		
		Ответ1С.Вставить("allow"  , false);
		Ответ1С.Вставить("message", "Не заданы настройки СКУД!");                    		 		
		
		Возврат СформироватьОтвет(Ответ1С);	
		
	КонецЕсли; 
	
	Если ПараметрыПодключения.ВестиРасширенныйЛог Тогда
		ЗаписьЖурналаРегистрации("Sigur", УровеньЖурналаРегистрации.Информация,,,Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'") + Символы.ПС + ТекстJSON);
	КонецЕсли;
	
	// Перобразуем текст JSON в стуктуру	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		ВходящиеДанные = ПрочитатьJSON(ЧтениеJSON);		
	Исключение
		ЗаписьЖурналаРегистрации("Sigur", УровеньЖурналаРегистрации.Информация,,,"Неверный формат JSON: " + Символы.ПС + ТекстJSON);
		
		Ответ1С = Новый Структура();		
		Ответ1С.Вставить("allow"  , false);
		Ответ1С.Вставить("message", "Неверный формат JSON!");                    		 		
		
		Возврат СформироватьОтвет(Ответ1С);	

	КонецПопытки;
	
	Дата = ТекущаяДатаСеанса();   
	
	// Для парковки.
	КодКарты = ?(ВходящиеДанные.Свойство("lpNumber"), ВходящиеДанные.lpNumber, ВходящиеДанные.keyHex);
	
	Картоприемник = ?(ВходящиеДанные.Свойство("extraReader"), ВходящиеДанные.extraReader, Неопределено);
	ПараметрыПодключения.Вставить("Картоприемник", Картоприемник);
	
	Возврат ПолучитьДоступ(Дата, ВходящиеДанные.accessPoint, КодКарты, ВходящиеДанные.direction, ПараметрыПодключения);	
	
КонецФункции

// Функция, фиксирует проходы через точки доступа.
//
Функция EventsPOST(Запрос)
    
	УстановитьПривилегированныйРежим(Истина);
	ТекстJSON = Запрос.ПолучитьТелоКакСтроку();
	
	ЗаписьЖурналаРегистрации("Sigur-Events", УровеньЖурналаРегистрации.Информация,,,Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'") + Символы.ПС + ТекстJSON);
	//ОбработчикДрайвера   = Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСКУДSigur_КОРП;
	//ПараметрыПодключения = МенеджерОборудованияСКУД.ПолучитьПараметрыПодключенияСКУД(ОбработчикДрайвера);
	//
	//Если ПараметрыПодключения = Неопределено Тогда				
	//	ЗаписьЖурналаРегистрации("Sigur", УровеньЖурналаРегистрации.Информация,,,"Не заданы настройки СКУД!");		
	//	Ответ = Новый HTTPСервисОтвет(400);
	//	Возврат Ответ;		
	//КонецЕсли; 
	//
	//Если ПараметрыПодключения.ВестиРасширенныйЛог Тогда
	//	ЗаписьЖурналаРегистрации("Sigur", УровеньЖурналаРегистрации.Информация,,,Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'") + Символы.ПС + ТекстJSON);
	//КонецЕсли;
    
    РегистрыСведений.ОчередьСообщений.ЗаписатьОчередьСообщений(ТекстJSON);
    
	logId = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Ответ1с = Новый Структура("confirmedLogId", logId);	
    
	Возврат СформироватьОтвет(Ответ1С);
    
    УстановитьПривилегированныйРежим(Ложь);

КонецФункции

// Функция, возвращает доступ клиента.
//
Функция ПолучитьДоступ(Дата, НомерТочки, Знач КодКарты, КодНаправленияПрохода, ПараметрыПодключения)
		
	ЭтоВход            			 = Неопределено;
	ЭтоПарковка        			 = Ложь;
	СтруктурнаяЕдиница 			 = Неопределено;
	МассивПомещений    			 = Неопределено;
	УслугаПарковки     			 = Неопределено;
	ПапкаАвтомобилей   			 = Неопределено;
	ВремяПарковки      			 = 0;
	РегистироватьПроход			 = Ложь;
	ЭтоШтрихкод        			 = Ложь;
	ЕстьБиометрия      			 = Ложь;
	ТребуетсяМедСправка			 = Ложь;
	ТарифицированнаяЗона		 = Неопределено;
	УслугаТариф        			 = Неопределено;
	ВидЦенТариф        			 = Неопределено;
	ОплатаЛСТариф      			 = Ложь;
	Камера						 = Неопределено;
	ТарифицированнаяЗонаПарковка = Ложь;
	Картоприемник                = НЕ ПараметрыПодключения.Картоприемник = Неопределено;
	КонвертироватьКодКарты		 = НЕ ?(ПараметрыПодключения.Свойство("НеКонвертироватьКодКарты"), ПараметрыПодключения.НеКонвертироватьКодКарты, Ложь);
	НеСоздаватьНовоеПосещение	 = ?(ПараметрыПодключения.Свойство("НеСоздаватьНовоеПосещение"), ПараметрыПодключения.НеСоздаватьНовоеПосещение, 0);
	ВремяБлокировки              = ?(ПараметрыПодключения.Свойство("ВремяБлокировкиПрикладыванияКарты"), ПараметрыПодключения.ВремяБлокировкиПрикладыванияКарты, 0);
	АктивироватьЧПУ              = ПараметрыПодключения.Свойство("АктивироватьЧленствоПакетУслугПриПроходе") И ПараметрыПодключения.АктивироватьЧленствоПакетУслугПриПроходе;
	МенятьБайтыМестами           = ?(ПараметрыПодключения.Свойство("МенятьБайтыМестами"), ПараметрыПодключения.МенятьБайтыМестами, Ложь); 
	КартоприемникИспользуется    = ПараметрыПодключения.Свойство("ВыходПоКлючамЧерезКартоприемник") И ПараметрыПодключения.ВыходПоКлючамЧерезКартоприемник;	
	
	// При разрешении доступа "allow": true" также использует поясняющее сообщение "message", 
	// которое, согласно документации, должно использоваться только при запрете доступа и пояснять причину отказа.
	Ответ1С = Новый Структура("allow, message, faceVer", false, "", "OFF");
	Если Картоприемник Тогда
		Ответ1С.Вставить("reqOpr", false);
	КонецЕсли;
	
	Для Каждого ТочкаДоступа из ПараметрыПодключения.ТаблицаТочекДоступа Цикл
		Если СокрЛП(ТочкаДоступа.SID) = Формат(НомерТочки, "ЧГ=") Тогда
			МассивПомещений        = ТочкаДоступа.СписокПомещений; // Если массив пустой, то ограничений нет.
			СтруктурнаяЕдиница     = ТочкаДоступа.СтруктурнаяЕдиница;
			РегистироватьПроход    = ТочкаДоступа.РегистрироватьПроход;
			ЭтоШтрихкод            = ?(ТочкаДоступа.Свойство("ТипСчитывателя")      , ТочкаДоступа.ТипСчитывателя      , Ложь);
			ЕстьБиометрия          = ?(ТочкаДоступа.Свойство("Биометрия")           , ТочкаДоступа.Биометрия           , Ложь);
			ТребуетсяМедСправка    = ?(ТочкаДоступа.Свойство("ТребуетсяМедСправка") , ТочкаДоступа.ТребуетсяМедСправка , Ложь);
			ТарифицированнаяЗона   = ?(ТочкаДоступа.Свойство("ТарифицированнаяЗона"), ТочкаДоступа.ТарифицированнаяЗона, Ложь);
			УслугаТариф            = ?(ТочкаДоступа.Свойство("Услуга")              , ТочкаДоступа.Услуга              , Неопределено);
			ВидЦенТариф            = ?(ТочкаДоступа.Свойство("ВидЦен")              , ТочкаДоступа.ВидЦен              , Неопределено);
			ОплатаЛСТариф          = ?(ТочкаДоступа.Свойство("ОплатаЛС")            , ТочкаДоступа.ОплатаЛС            , Ложь);
			Камера				   = ?(ТочкаДоступа.Свойство("Камера")				, ТочкаДоступа.Камера			   , Неопределено);
			ЭтоЗамок               = ?(ТочкаДоступа.Свойство("ТипКонтроллера")      , ТочкаДоступа.ТипКонтроллера      , Ложь);
			CовмещенныйКартоприемник = ТочкаДоступа.Свойство("CовмещенныйКартоприемник") И ТочкаДоступа.CовмещенныйКартоприемник;
			НаименованиеУстройства = ТочкаДоступа.ТочкаДоступа;
		КонецЕсли;		 		
	КонецЦикла;
	
	Для Каждого ТочкаДоступа из ПараметрыПодключения.ТаблицаПарковки Цикл
		Если СокрЛП(ТочкаДоступа.SID) = Формат(НомерТочки, "ЧГ=") Тогда			
			СтруктурнаяЕдиница 			 = ТочкаДоступа.СтруктурнаяЕдиница;
			ЭтоПарковка        			 = Истина;
			ТарифицированнаяЗонаПарковка = ТочкаДоступа.ТарифицированнаяЗона;
			УслугаПарковки    			 = ТочкаДоступа.Услуга;
			ВремяПарковки      			 = ТочкаДоступа.Бесплатно;
		КонецЕсли;
	КонецЦикла;
	
	// Если не заполнена структурная единица, то возвращаем ошибку.
	Если СтруктурнаяЕдиница = Неопределено Тогда
		Описание = "Не заданы параметры контроллера в настройках СКУД!";
		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты,,НомерТочки,, Описание);		
				
		Ответ1С.allow   = false;
		Ответ1С.message = Описание;
		Возврат СформироватьОтвет(Ответ1С);
		
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(КодКарты) Тогда
		Описание = "Не передан код карты!";
		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты,,НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
		
		Ответ1С.allow   = false;
		Ответ1С.message = Описание;
		Возврат СформироватьОтвет(Ответ1С); 	
	КонецЕсли;
	
	// Актуализируем часовой пояс исходя из структурной единицы
	ЧасовойПоясТекущегоСеанса = ЧасовойПоясСеанса();
	ЧасовойПоясСЕ = СтруктурнаяЕдиница.ЧасовойПояс;
	Если ЧасовойПоясТекущегоСеанса <> ЧасовойПоясСЕ Тогда 
		УстановитьЧасовойПоясСеанса(ЧасовойПоясСЕ);
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;                                     	
	
	// Направление запрошенного доступа. 1 = выход 2 = вход 3 = неизвестное	
	Если КодНаправленияПрохода = 1 Тогда
		ЭтоВход = Ложь;
	ИначеЕсли КодНаправленияПрохода = 2 Тогда
		ЭтоВход = Истина;
	Иначе
		Описание = "Направление прохода не определено!"; 
		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты,, НомерТочки, НаименованиеУстройства,,Описание);
		
		Ответ1С.allow   = false;
		Ответ1С.message = Описание;
		Возврат СформироватьОтвет(Ответ1С); 

	КонецЕсли;  
	
	#Область Парковка
	
	Если ЭтоПарковка Тогда
		
		Если ТарифицированнаяЗонаПарковка Тогда		
		
			Если ПараметрыПодключения.Свойство("ПапкаАвтомобилей") Тогда
				ПапкаАвтомобилей = ПараметрыПодключения.ПапкаАвтомобилей;
			КонецЕсли;
			
			Если ЭтоВход Тогда			
				
				ДанныеКлиента = МенеджерОборудованияСКУД.СоздатьКлиентаАвто(КодКарты, ПапкаАвтомобилей, СтруктурнаяЕдиница);	
				Если ЗначениеЗаполнено(ДанныеКлиента.ОписаниеОшибки) Тогда
					Описание   = "Проезд разрешен, ошибка создания клиента: " + ДанныеКлиента.ОписаниеОшибки;				
				Иначе			
					Описание   = "Проезд разрешен";                                                          				 
				КонецЕсли;
				
				КлиентАвто = Новый Структура("ЗанятКлиентом", ДанныеКлиента.Клиент);
				
				ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 6, КодКарты, КлиентАвто, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
				
				Ответ1С.allow   = true;				
				Возврат СформироватьОтвет(Ответ1С);				
			Иначе			
				
				ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
				СтруктураДоступа = МенеджерОборудованияСКУД.ПолучитьДоступПарковки(Дата, КодКарты, УслугаПарковки, ПапкаАвтомобилей, СтруктурнаяЕдиница, ВремяПарковки);
				ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ВремяВыполнения = (ВремяОкончанияОперации - ВремяНачалаОперации)/1000;
				
				ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 6, КодКарты, СтруктураДоступа.Клиент, НомерТочки, НаименованиеУстройства, ЭтоВход, СтруктураДоступа.Описание, СтруктураДоступа.Основание, ВремяВыполнения);
				
				Ответ1С.allow   = СтруктураДоступа.Доступ;
				Ответ1С.message = СтруктураДоступа.Описание;
				Возврат СформироватьОтвет(Ответ1С);
			КонецЕсли;
			
		Иначе
			
			Клиент		  = Справочники.Автомобили.НайтиПоКоду(КодКарты).Владелец;
			ДанныеКлиента = Новый Структура("ЗанятКлиентом", Клиент);
			
			Если ЭтоВход Тогда			
				
				Если Не ЗначениеЗаполнено(Клиент) Тогда
					
					Описание = "Проезд запрещен";
					ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 6, КодКарты, ДанныеКлиента, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
					
					Ответ1С.allow   = false;
					Ответ1С.message = Описание;
					Возврат СформироватьОтвет(Ответ1С);
					
				Иначе
										
					СтруктураДоступа = МенеджерОборудованияСКУД.ПолучитьДоступ(Клиент, КодКарты, Дата, ЭтоВход, СтруктурнаяЕдиница,, АктивироватьЧПУ, НеСоздаватьНовоеПосещение);
					
					Описание = ?(СтруктураДоступа.Доступ, "Проезд разрешен", "Проезд запрещен, у клиента нет доступных оснований");
					ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 6, КодКарты, ДанныеКлиента, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
					
					Ответ1С.allow   = СтруктураДоступа.Доступ;
					Ответ1С.message = Описание;
					Возврат СформироватьОтвет(Ответ1С);
					
				КонецЕсли;	
				
			Иначе			
				
				Описание = "Проезд разрешен";
				ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 6, КодКарты, ДанныеКлиента, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
				
				Ответ1С.allow   = true;
				Возврат СформироватьОтвет(Ответ1С);
				
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Конвертируем код карты.
	Попытка
		Если ЭтоШтрихкод Тогда
			КодКарты = Формат(Конвертировать_16_В_10_СС(КодКарты), "ЧГ=");
		ИначеЕсли КонвертироватьКодКарты Тогда		
			КодКарты = КонвертироватьКодКарты(КодКарты);
		ИначеЕсли МенятьБайтыМестами Тогда
			
			Если НЕ СтрДлина(КодКарты)%2 = 0 Тогда
				КодКарты = "0" + КодКарты;
			КонецЕсли;
			
			КодКарты = Сред(КодКарты, 5, 2) + Сред(КодКарты, 3, 2) + Сред(КодКарты, 1, 2);
			
		КонецЕсли;
	Исключение			                                                                       		
		Описание = "Ошибка конвертации карты!"; 
		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты,, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
		
		Ответ1С.allow   = false;
		Ответ1С.message = Описание;
		Возврат СформироватьОтвет(Ответ1С);
		
	КонецПопытки;
	
	// Получаем данные карты.
	Если ЭтоШтрихкод Тогда
		ДанныеКарты = Справочники.Карты.ПолучитьДанныеШтриховойКартыКлюча(КодКарты);
	ИначеЕсли МенятьБайтыМестами Тогда
		ДанныеКарты = Справочники.Карты.ПолучитьДанныеМагнитнойКартыКлючаПоПервойЧастиКода(КодКарты); 
	Иначе
		ДанныеКарты = Справочники.Карты.ПолучитьДанныеМагнитнойКартыКлюча(КодКарты);
	КонецЕсли;

	Если ДанныеКарты = Неопределено Тогда
		// Проверим доступы в других клубах.
		Если ОбщегоНазначения.МодульСоДоступКлубовСуществует() И Константы.ИспользоватьСоДоступ.Получить() Тогда 
			ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
			МодульСоДоступКлубов = ОбщегоНазначения.ПолучитьМодульСоДоступКлубов();
			Если МодульСоДоступКлубов.РазрешенСоДоступ(СтруктурнаяЕдиница) Тогда
				СтруктураДоступа = МенеджерОборудованияСКУД.ПолучитьДоступВДругихКлубах(КодКарты, Дата);
				Если СтруктураДоступа.Доступ Тогда
					Описание = "Доступ разрешен, СоДоступ " + СтруктураДоступа.ОснованиеОписание;
				Иначе
					Описание = ?(НЕ ЗначениеЗаполнено(СтруктураДоступа.УИДКлиента), "Доступ запрещен, неизвестный код карты", "Доступ запрещен, СоДоступ нет доступных оснований");						
				КонецЕсли; 			
				
				ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ВремяВыполнения = (ВремяОкончанияОперации - ВремяНачалаОперации)/1000;
				
				ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты,, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание,, ВремяВыполнения,,, СтруктураДоступа.УИДКлиента, СтруктураДоступа.Основание, СтруктураДоступа.СтруктурнаяЕдиница);
				
				Ответ1С.allow   = СтруктураДоступа.Доступ;			
				Ответ1С.message = Описание;
				Возврат СформироватьОтвет(Ответ1С);
			КонецЕсли;
		КонецЕсли;		
		
		Описание = "Доступ запрещен, неизвестный код карты";
		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты,, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
		
		Ответ1С.allow   = false;
		Ответ1С.message = Описание;
		Возврат СформироватьОтвет(Ответ1С);  
		
	ИначеЕсли ДанныеКарты.Заблокирована ИЛИ ДанныеКарты.ПометкаУдаления Тогда
		
		Описание = "Доступ запрещен, карта заблокирована";
		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
		
		Ответ1С.allow   = false;
		Ответ1С.message = Описание;
		Возврат СформироватьОтвет(Ответ1С);  
		
	КонецЕсли;
	
	// Картоприемник, разрешаем, туда скидывать только ключи
	// Если картоприемник совмещенный, то можно и по картам выходить.
	Если Картоприемник И НЕ CовмещенныйКартоприемник И ТипЗнч(ДанныеКарты.Карта) = Тип("СправочникСсылка.Карты") Тогда
		
		Описание = "Доступ запрещен, картоприемник принимает только ключи";
		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание,,,,,,, Картоприемник);
		
		Ответ1С.allow   = false; 
		Ответ1С.message = Описание;
		Возврат СформироватьОтвет(Ответ1С); 
		
	КонецЕсли;
	
	// Блокируем выход по ключам через турникет, можно выходить только по картоприемнику.
	Если НЕ Картоприемник И КартоприемникИспользуется И НЕ ЭтоВход И РегистироватьПроход И ТипЗнч(ДанныеКарты.Карта) = Тип("СправочникСсылка.Ключи") Тогда
		Описание = "Доступ запрещен, по ключам можно выходить только через картоприемник";
		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
		
		Ответ1С.allow   = false; 
		Ответ1С.message = Описание;
		Возврат СформироватьОтвет(Ответ1С);
	КонецЕсли;

	// Распознавание лица
	Если ЗначениеЗаполнено(Камера) И НЕ ДанныеКарты.НеИспользоватьБиометрию Тогда
		Если ДанныеКарты.ВладелецКарты.УИДСинхронизации = "" Тогда
			
			Описание = "Доступ запрещен, фото не загружено в сервис RecognitionX";
			ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
			
			Ответ1С.allow   = false;
			Ответ1С.message = Описание;
			Возврат СформироватьОтвет(Ответ1С);
			
		КонецЕсли;
		
		idКамеры					 = Строка(Сред(Камера, СтрНайти(Камера, ";") + 2));
		ПараметрыПодключенияКСервису = ПолучитьПараметрыПодключенияКСервису(idКамеры);
		
		Если ПараметрыПодключенияКСервису = Неопределено Тогда
			
			Описание = "Не удалось получить параметры подключения к сервису RecognitionX";
			ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
			
			Ответ1С.allow   = false;
			Ответ1С.message = Описание;
			Возврат СформироватьОтвет(Ответ1С);
			
		КонецЕсли;
		
		ОписаниеОшибки = РаспознатьЛицоRX(ДанныеКарты.ВладелецКарты, idКамеры, ПараметрыПодключенияКСервису.Параметры);
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			
			Описание = ОписаниеОшибки;
			ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
			
			Ответ1С.allow   = false;
			Ответ1С.message = Описание;
			Возврат СформироватьОтвет(Ответ1С);
			
		КонецЕсли;
	КонецЕсли;
	
	// Для сотрудников вход везде свободный.
	Если ТипЗнч(ДанныеКарты.ВладелецКарты) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		// Проверяем на двойной проход (antipassback).
		Если РегистироватьПроход и ПараметрыПодключения.Свойство("ЗапретитьДвойнойПроходСотрудникам") и ПараметрыПодключения.ЗапретитьДвойнойПроходСотрудникам Тогда
			ПоследнийПроход = РегистрыСведений.ЖурналСобытийСКУД_КОРП.ПолучитьПоследнийПроходВКлуб(ДанныеКарты.ВладелецКарты, КодКарты, ЭтоВход);
			Если ПоследнийПроход Тогда
				Описание = "Доступ запрещен, повторный проход";
				ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
				
				Ответ1С.allow   = false;
				Ответ1С.message = Описание;
				Возврат СформироватьОтвет(Ответ1С);
				
			КонецЕсли;
		КонецЕсли;    		
		
		// Проверяем доступ по помещениям.
		Если МенеджерОборудованияСКУД.ПолучитьДоступСотрудникаПоПомещениям(ДанныеКарты.ВладелецКарты, МассивПомещений, Дата) = Истина Тогда
			
			Описание = "Доступ разрешен";
			ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);		
			
			// Если это замок, то формируем посещение вручную.
			Если ЭтоЗамок Тогда
				СоздатьПосещение(Дата, НомерТочки, КодКарты, КодНаправленияПрохода, Истина, ПараметрыПодключения, Ложь, ДанныеКарты); 
			КонецЕсли;  
			
			Ответ1С.allow   = true;						
			Если ЕстьБиометрия И ЭтоВход И НЕ ДанныеКарты.НеИспользоватьБиометрию Тогда
				Ответ1С.faceVer = "HARD";
			КонецЕсли;
			Возврат СформироватьОтвет(Ответ1С);
		Иначе
			Описание = "Доступ запрещен, нет доступа к помещению";
			ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);		
			
			Ответ1С.allow   = false;  
			Ответ1С.message = Описание;
			Возврат СформироватьОтвет(Ответ1С);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим на одновременное прикладывание карты к разным турникетам.
	Если ВремяБлокировки > 0 Тогда
		ПрикладываниеСостоялось = РегистрыСведений.ЖурналСобытийСКУД_КОРП.ПолучитьПоследнееПрикладывание(ДанныеКарты.ВладелецКарты, КодКарты, Дата, ВремяБлокировки);
		Если ПрикладываниеСостоялось Тогда
			Описание = "Доступ запрещен, карту прикладывали к турникету менее " + ВремяБлокировки + " секунд назад";
			ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);		
			
			Ответ1С.allow   = false;
			Ответ1С.message = Описание;
			Возврат СформироватьОтвет(Ответ1С);		
		КонецЕсли;	
	КонецЕсли;	
	
	// Проверяем на двойной проход (antipassback).
	Если РегистироватьПроход и ПараметрыПодключения.ЗапретитьДвойнойПроход Тогда
		ПоследнийПроход = РегистрыСведений.ЖурналСобытийСКУД_КОРП.ПолучитьПоследнийПроходВКлуб(ДанныеКарты.ВладелецКарты, КодКарты, ЭтоВход);
		Если ПоследнийПроход Тогда
			Описание = "Доступ запрещен, повторный проход";
			ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
			
			Ответ1С.allow   = false;
			Ответ1С.message = Описание;
			Возврат СформироватьОтвет(Ответ1С);
			
		КонецЕсли;
	КонецЕсли;
	
	#Область ПроходСЗадолженностью
	
	Если РегистироватьПроход Тогда
		// Проверяем клиента на долги.
		СуммаДолга = РегистрыНакопления.РасчетыСПокупателями.ПолучитьЗадолженностьПоКонтрагентуСУчетомРассрочек(ДанныеКарты.ВладелецКарты, Дата, СтруктурнаяЕдиница);
		Если СуммаДолга > 0 Тогда
			
			РазрешитьПроходСДолгом = Константы[?(ЭтоВход, "РазрешатьВходКлиентовСЗадолженностью", "РазрешатьВыходКлиентовСЗадолженностью")].Получить();		
			НастройкиУсловий       = Константы[?(ЭтоВход, "РазрешатьВходКлиентовСЗадолженностьюУсловия", "РазрешатьВыходКлиентовСЗадолженностьюУсловия")].Получить().Получить();
			
			Если РазрешитьПроходСДолгом Тогда
				
				Если НастройкиУсловий.Сумма > 0 И СуммаДолга > НастройкиУсловий.Сумма Тогда
					НаименованиеВалюты = ОбщегоНазначения.ПолучитьСимвольныйКодИспользуемойВалютыЦелойЧасти();
					Описание = СтрШаблон("Доступ запрещен, сумма долга клиента %1%2 превышает лимит %3%4", СуммаДолга, НаименованиеВалюты, НастройкиУсловий.Сумма, НаименованиеВалюты);
				Иначе
					
					СтруктураДолга = РегистрыНакопления.РасчетыСПокупателями.ПолучитьСамыйРаннийДолгКонтрагента(ДанныеКарты.ВладелецКарты, Дата, СтруктурнаяЕдиница);
					Если НастройкиУсловий.Период > 0 И СтруктураДолга <> Неопределено Тогда
						
						КоличествоДней = Цел((НачалоДня(Дата) - НачалоДня(СтруктураДолга.Дата)) / 86400);
						
						Если КоличествоДней > НастройкиУсловий.Период Тогда
							Описание = СтрШаблон("Доступ запрещен, количество дней задолженности %1 превышает лимит дней %2", КоличествоДней, НастройкиУсловий.Период);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НаименованиеВалюты = ОбщегоНазначения.ПолучитьСимвольныйКодИспользуемойВалютыЦелойЧасти();
				Описание = СтрШаблон("Доступ запрещен, сумма долга клиента %1%2", СуммаДолга, НаименованиеВалюты);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Описание) Тогда
				
				ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);				
				
				Ответ1С.allow   = false;
				Ответ1С.message = Описание;
				Возврат СформироватьОтвет(Ответ1С);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЭтоВход И ПараметрыПодключения.Свойство("НеВыпускатьБезСданногоИнвентаря") И ПараметрыПодключения.НеВыпускатьБезСданногоИнвентаря Тогда
			
			ТаблицаИнвентаря = РегистрыСведений.Аренда.ИнвентарьВАренде(ТекущаяДатаСеанса(), СтруктурнаяЕдиница, ДанныеКарты.ВладелецКарты);
			
			Если ТаблицаИнвентаря.Количество() > 0 Тогда
				
				Описание = "Доступ запрещен. Не сдан инвентарь";
				ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
				
				Ответ1С.allow   = false;
				Ответ1С.message = Описание;
				Возврат СформироватьОтвет(Ответ1С);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти


    //Если ТарифицированнаяЗона Тогда
		
#Область ТарифицированнаяЗона

        //// Проверяем мед. справку.
        //Если ТребуетсяМедСправка Тогда		
        //	
        //	МедСправкаКлиента = РегистрыСведений.МедицинскиеСправкиКлиентов.ПолучитьМедицинскуюСправкуКонтрагента(ДанныеКарты.ВладелецКарты,, Дата);				
        //	
        //	МедСправкаДействительна = Ложь;
        //	
        //	Если ЗначениеЗаполнено(МедСправкаКлиента) Тогда
        //		
        //		ДатаОкончанияСправки = ?(ЗначениеЗаполнено(МедСправкаКлиента.ДатаОкончания), МедСправкаКлиента.ДатаОкончания, ДобавитьМесяц(МедСправкаКлиента.ДатаВыдачи, МедСправкаКлиента.МедСправка.СрокДействия));
        //		
        //		Если НачалоДня(ДатаОкончанияСправки + МедСправкаКлиента.МедСправка.БлокироватьВходЧерез * 86400) >= НачалоДня(Дата) Тогда
        //			МедСправкаДействительна = Истина;
        //		КонецЕсли;						
        //		
        //	КонецЕсли;
        //	
        //	Если НЕ МедСправкаДействительна Тогда
        //		Описание = "Доступ запрещен, нет действующей мед. справки";
        //		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
        //		
        //		Ответ1С.allow   = false;
        //		Ответ1С.message = Описание;
        //		Возврат СформироватьОтвет(Ответ1С);			
        //	КонецЕсли;
        //	
        //КонецЕсли;   
        //
        //ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
        //Если ЭтоВход Тогда			
        //	
        //	// 1. Проверяем не входил ли клиент уже в эту зону.
        //	ПоследнийПроход = РегистрыСведений.ЖурналСобытийСКУД_КОРП.ПолучитьФактПоследнегоПрохода(ДанныеКарты.ВладелецКарты, КодКарты, Формат(НомерТочки, "ЧГ="));
        //	
        //	Если НЕ ПоследнийПроход = Неопределено И ПоследнийПроход Тогда
        //		Описание = "Доступ запрещен, повторный проход";
        //		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
        //		
        //		Ответ1С.allow   = false;
        //		Ответ1С.message = Описание;
        //		Возврат СформироватьОтвет(Ответ1С);
        //	КонецЕсли;
        //	
        //	
        //	// 1. Получим отстаток услуг тарф. зоны у клиента. 
        //	ОстатокУслуг = ПолучитьОстатокУслуг(Дата, ДанныеКарты.ВладелецКарты, УслугаТариф, СтруктурнаяЕдиница);
        //	
        //	// 2. Проверим остаток на лицевых счетах.		
        //	Если ОплатаЛСТариф Тогда			
        //		ТаблицаЛС = МенеджерОборудованияСКУД.ПолучитьОстаткиНаЛицевыхСчетахКонтрагента(Дата, СтруктурнаяЕдиница.Организация, ДанныеКарты.ВладелецКарты);
        //		ОстатокЛС = ТаблицаЛС.Итог("СуммаОстаток");
        //	Иначе
        //		ОстатокЛС   = 0;
        //	КонецЕсли;
        //	
        //	// 3. Получим стоимость услуги
        //	ЦенаУслуги = ПолучитьЦенуУслугиТарификации(Дата, СтруктурнаяЕдиница, ВидЦенТариф, УслугаТариф);
        //	
        //	// 4. Если есть остаток услуг или остаток л/с, пропускаем клиента.
        //	Если ОстатокУслуг > 0 ИЛИ ОстатокЛС > ЦенаУслуги Тогда
        //		СтруктураДоступа = Новый Структура("Доступ, Основание, Гость", Истина, Неопределено, Ложь);				
        //	Иначе
        //		Описание = "Доступ запрещен, недостаточно средств на счете";
        //		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
        //		
        //		Ответ1С.allow   = false;
        //		Ответ1С.message = Описание;
        //		Возврат СформироватьОтвет(Ответ1С);
        //	КонецЕсли;
        //Иначе
        //	// 1. Проверим на двойной проход.			
        //	ПоследнийПроход = РегистрыСведений.ЖурналСобытийСКУД_КОРП.ПолучитьФактПоследнегоПрохода(ДанныеКарты.ВладелецКарты, КодКарты, Формат(НомерТочки, "ЧГ="));
        //	Если НЕ ПоследнийПроход = Неопределено И Не ПоследнийПроход Тогда
        //		Описание = "Доступ запрещен, повторный проход";
        //		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
        //		
        //		Ответ1С.allow   = false;
        //		Ответ1С.message = Описание;
        //		Возврат СформироватьОтвет(Ответ1С);
        //	КонецЕсли;  
        //	
        //	// 2. Проверим был ли вход у клиента.
        //	Если ПоследнийПроход = Неопределено Тогда
        //		Описание = "Доступ запрещен, клиент не входил в зону";
        //		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
        //		
        //		Ответ1С.allow   = false;
        //		Ответ1С.message = Описание;
        //		Возврат СформироватьОтвет(Ответ1С);				
        //	КонецЕсли;			
        //	
        //	// 3. Разрешим доступ на выход клиента из зоны. Занятие будет создано по факту прохода 
        //	СтруктураДоступа = Новый Структура("Доступ, Основание, Гость", Истина, Неопределено, Ложь);
        //	
        //КонецЕсли;	
        //
        //ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
        //ВремяВыполнения = (ВремяОкончанияОперации - ВремяНачалаОперации)/1000;
        //
#КонецОбласти

    //Иначе	
		// Проверям не является ли клиент гостем.
		ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
		СтруктураДоступа = МенеджерОборудованияСКУД.ЭтоГость(СтруктурнаяЕдиница, Дата, ДанныеКарты.ВладелецКарты, ДанныеКарты.Карта, МассивПомещений);
		ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ВремяВыполнения = (ВремяОкончанияОперации - ВремяНачалаОперации)/1000;		
		
		ВсегдаРазрешатьВыход = ПараметрыПодключения.Свойство("ВсегдаРазрешатьВыход") И ПараметрыПодключения.ВсегдаРазрешатьВыход;
		
		Если Не СтруктураДоступа.Гость Тогда
			
			// Проверяем основания прохода клиента.
			ВремяНачалаОперации    = ТекущаяУниверсальнаяДатаВМиллисекундах();			
			СтруктураДоступа       = МенеджерОборудованияСКУД.ПолучитьДоступ(ДанныеКарты.ВладелецКарты, ДанныеКарты.Карта, Дата, ЭтоВход, СтруктурнаяЕдиница, МассивПомещений, АктивироватьЧПУ, НеСоздаватьНовоеПосещение, ТребуетсяМедСправка);
			ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ВремяВыполнения        = (ВремяОкончанияОперации - ВремяНачалаОперации)/1000;
			
		КонецЕсли;	
		
		// Если стоит флаг всегда выпускать.
		СтруктураДоступа.Доступ = ?(НЕ ЭтоВход И ВсегдаРазрешатьВыход, Истина, СтруктураДоступа.Доступ);
		
    //КонецЕсли;
	
	Если СтруктураДоступа.Доступ Тогда
		ДопОписание = "Доступ разрешен";
	ИначеЕсли ЗначениеЗаполнено(СтруктураДоступа.Описание) Тогда
		ДопОписание = "Доступ запрещен, " + СтруктураДоступа.Описание; // запрет по мед. справки.
	Иначе
		ДопОписание = "Доступ запрещен, у клиента нет доступных оснований";
	КонецЕсли;
	
	Если СтруктураДоступа.Свойство("СоДоступСЕ") Тогда
		СоДоступСЕ = СтруктураДоступа.СоДоступСЕ;
	КонецЕсли;
	
	// Для совмещенного картоприемника, если это карты, то не прописываем его и не забираем карту.
	Если CовмещенныйКартоприемник И ТипЗнч(ДанныеКарты.Карта) = Тип("СправочникСсылка.Карты") Тогда
		Картоприемник = Ложь;
	КонецЕсли;
	
	Описание = ?(СтруктураДоступа.Гость, "Гость. ", "") + ДопОписание;	
	ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание, СтруктураДоступа.Основание, ВремяВыполнения, СтруктураДоступа.Гость,,,,СоДоступСЕ, Картоприемник);
	
	// Если это замок, то формируем посещение вручную.
	Если ЭтоЗамок И СтруктураДоступа.Доступ Тогда
		СоздатьПосещение(Дата, НомерТочки, КодКарты, КодНаправленияПрохода, Истина, ПараметрыПодключения, Ложь, ДанныеКарты); 
	КонецЕсли;
	
	Ответ1С.allow   = СтруктураДоступа.Доступ;
	Ответ1С.message = Описание;
	Если Картоприемник Тогда
		Ответ1С.reqOpr = СтруктураДоступа.Доступ;
	КонецЕсли;
	Если СтруктураДоступа.Доступ И ЕстьБиометрия И ЭтоВход И НЕ ДанныеКарты.НеИспользоватьБиометрию Тогда
		Ответ1С.faceVer = "HARD";
	КонецЕсли;
	Возврат СформироватьОтвет(Ответ1С);
	
КонецФункции

// Функция, возвращает стоимость купленных услуг.
//
Функция ПолучитьОстатокУслуг(Дата, Клиент, Услуга, СтруктурнаяЕдиница)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"              , Дата);
	Запрос.УстановитьПараметр("Контрагент"        , Клиент);
	Запрос.УстановитьПараметр("УслугаСолярия"     , Услуга);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.Текст  = МенеджерОборудованияСКУД.ПолучитьТекстЗапросаСолярия();
	
	ТаблицаОснований = Запрос.Выполнить().Выгрузить();		
	
	Возврат ТаблицаОснований.Итог("Количество");	
	
КонецФункции  

// Функция, создает событие.
//
Функция СоздатьПосещение(Дата, НомерТочки, Знач КодКарты, КодНаправленияПрохода, ПроходСостоялся, ПараметрыПодключения, ДатаУстановленаИзСеанса = Ложь, ДанныеКарты = Неопределено)
		
    ////Определим направление, структурную единицу и доступ к помещениям.
    //ЭтоВход             	  = Неопределено;
    //СтруктурнаяЕдиница  	  = Неопределено;
    //РегистироватьПроход 	  = Ложь;
    //ЭтоШтрихкод         	  = Ложь;
    //ТарифицированнаяЗона	  = Неопределено;
    //УслугаТариф         	  = Неопределено;
    //ВидЦенТариф        		  = Неопределено;
    //ОплатаЛСТариф      		  = Ложь;
    //МассивПомещений    		  = Неопределено;
    //КонвертироватьКодКарты	  = НЕ ?(ПараметрыПодключения.Свойство("НеКонвертироватьКодКарты"), ПараметрыПодключения.НеКонвертироватьКодКарты, Ложь);
    //НеСоздаватьНовоеПосещение = ?(ПараметрыПодключения.Свойство("НеСоздаватьНовоеПосещение"), ПараметрыПодключения.НеСоздаватьНовоеПосещение, 0);
    //МенятьБайтыМестами        = ?(ПараметрыПодключения.Свойство("МенятьБайтыМестами"), ПараметрыПодключения.МенятьБайтыМестами, Ложь); 
    //КартоприемникИспользуется = ПараметрыПодключения.Свойство("ВыходПоКлючамЧерезКартоприемник") И ПараметрыПодключения.ВыходПоКлючамЧерезКартоприемник;
    //
    //Для Каждого ТочкаДоступа из ПараметрыПодключения.ТаблицаТочекДоступа Цикл
    //	Если СокрЛП(ТочкаДоступа.SID) = Формат(НомерТочки, "ЧГ=") Тогда			
    //		СтруктурнаяЕдиница     = ТочкаДоступа.СтруктурнаяЕдиница;
    //		РегистироватьПроход    = ТочкаДоступа.РегистрироватьПроход;
    //		ЭтоШтрихкод            = ?(ТочкаДоступа.Свойство("ТипСчитывателя"), ТочкаДоступа.ТипСчитывателя, Ложь);
    //		ТарифицированнаяЗона   = ?(ТочкаДоступа.Свойство("ТарифицированнаяЗона"), ТочкаДоступа.ТарифицированнаяЗона, Ложь);
    //		УслугаТариф            = ?(ТочкаДоступа.Свойство("Услуга")              , ТочкаДоступа.Услуга              , Неопределено);
    //		ВидЦенТариф            = ?(ТочкаДоступа.Свойство("ВидЦен")              , ТочкаДоступа.ВидЦен              , Неопределено);
    //		ОплатаЛСТариф          = ?(ТочкаДоступа.Свойство("ОплатаЛС")            , ТочкаДоступа.ОплатаЛС            , Ложь);
    //		CовмещенныйКартоприемник = ТочкаДоступа.Свойство("CовмещенныйКартоприемник") И ТочкаДоступа.CовмещенныйКартоприемник;
    //		НаименованиеУстройства = ТочкаДоступа.ТочкаДоступа;
    //		МассивПомещений        = ТочкаДоступа.СписокПомещений;
    //	КонецЕсли;
    //КонецЦикла;

    //// Если не заполнена структурная единица, то возвращаем ошибку.
    //Если СтруктурнаяЕдиница = Неопределено Тогда
    //	Описание = "Не заданы параметры контроллера в настройках СКУД!";
    //	//ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты,,НомерТочки,, Описание);
    //	ЗаписьЖурналаРегистрации("Sigur", УровеньЖурналаРегистрации.Информация,,,"Не заданы параметры контроллера "+НомерТочки+" в настройках СКУД!");
    //	Возврат Ложь;
    //КонецЕсли;

    //// Актуализируем дату сеанса из структруной единицы, если к нам не пришла дата от Сигура.
    //Если ДатаУстановленаИзСеанса Тогда
    //	ЧасовойПоясТекущегоСеанса = ЧасовойПоясСеанса();
    //	ЧасовойПоясСЕ = СтруктурнаяЕдиница.ЧасовойПояс;
    //	Если ЧасовойПоясТекущегоСеанса <> ЧасовойПоясСЕ Тогда 
    //		УстановитьЧасовойПоясСеанса(ЧасовойПоясСЕ);
    //		Дата = ТекущаяДатаСеанса();
    //	КонецЕсли;
    //КонецЕсли; 	
    //
    //// Направление запрошенного доступа. 1 = выход 2 = вход 3 = неизвестное	
    //Если КодНаправленияПрохода = 1 Тогда
    //	ЭтоВход = Ложь;
    //ИначеЕсли КодНаправленияПрохода = 2 Тогда
    //	ЭтоВход = Истина;
    //Иначе
    //	Описание = "Создание посещения: Направление прохода не определено!"; 
    //	ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты,, НомерТочки, НаименованиеУстройства,,Описание);
    //	
    //	Возврат Ложь;
    //	
    //КонецЕсли; 
    //
    //// Ищем владельца карты, если его нам не передали.
    //Если ДанныеКарты = Неопределено Тогда
    //	// Конвертируем код карты.
    //	Попытка
    //		Если ЭтоШтрихкод Тогда
    //			КодКарты = Формат(Конвертировать_16_В_10_СС(КодКарты), "ЧГ=");
    //		ИначеЕсли КонвертироватьКодКарты Тогда		
    //			КодКарты = КонвертироватьКодКарты(КодКарты);
    //		ИначеЕсли МенятьБайтыМестами Тогда
    //			
    //			Если НЕ СтрДлина(КодКарты)%2 = 0 Тогда
    //				КодКарты = "0" + КодКарты;
    //			КонецЕсли;
    //			
    //			КодКарты = Сред(КодКарты, 5, 2) + Сред(КодКарты, 3, 2) + Сред(КодКарты, 1, 2);			
    //			
    //		КонецЕсли;
    //	Исключение			                                                                       		
    //		Описание = "Ошибка конвертации карты!"; 
    //		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты,, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
    //		
    //		Возврат Ложь;
    //	КонецПопытки;
    //	
    //	// Получаем данные карты.
    //	Если ЭтоШтрихкод Тогда
    //		ДанныеКарты = Справочники.Карты.ПолучитьДанныеШтриховойКартыКлюча(КодКарты);
    //	ИначеЕсли МенятьБайтыМестами Тогда
    //		ДанныеКарты = Справочники.Карты.ПолучитьДанныеМагнитнойКартыКлючаПоПервойЧастиКода(КодКарты); 
    //	Иначе
    //		ДанныеКарты = Справочники.Карты.ПолучитьДанныеМагнитнойКартыКлюча(КодКарты);
    //	КонецЕсли;
    //	
    //	Если ДанныеКарты = Неопределено Тогда
    //		
    //		Если ОбщегоНазначения.МодульСоДоступКлубовСуществует() И Константы.ИспользоватьСоДоступ.Получить() Тогда 				
    //			МодульСоДоступКлубов = ОбщегоНазначения.ПолучитьМодульСоДоступКлубов();
    //			ДанныеОснования = РегистрыСведений.ЖурналСобытийСКУД_КОРП.ПолучитьОснованиеПроходаСоДоступ(КодКарты);
    //			
    //			// Запускаем фоновое по затягиванию клиента.
    //			ДанныеОснования.Вставить("ЛогироватьЖурналСКУД", Истина);
    //			ДанныеОснования.Вставить("КодКарты"   , КодКарты);
    //			ДанныеОснования.Вставить("ЭтоВход"    , ЭтоВход);
    //			ДанныеОснования.Вставить("Устройство" , НомерТочки);
    //			ДанныеОснования.Вставить("ДатаПрохода", Дата);
    //			ДанныеОснования.Вставить("РегистироватьПроход"      , РегистироватьПроход);
    //			ДанныеОснования.Вставить("НеСоздаватьНовоеПосещение", НеСоздаватьНовоеПосещение);						
    //			ДанныеОснования.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
    //			
    //			ПараметрыДлительнойОперации = МодульСоДоступКлубов.НачатьПолучениеКлиентаСоДоступаВФоне(Строка(Новый УникальныйИдентификатор()), ДанныеОснования);
    //			
    //			Возврат Истина;
    //		КонецЕсли;   			
    //		
    //		Описание = "Доступ запрещен, неизвестный код карты";
    //		ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, 1, КодКарты,, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание);
    //		
    //		Возврат Ложь;	
    //	КонецЕсли;
    //КонецЕсли;
    //
    //// Определяем основания прохода.	
    //Гость         = Ложь;
    //Основание     = Неопределено;
    //СоДостпуСЕ    = Неопределено;
    //Картоприемник = Ложь;
    //Если ТипЗнч(ДанныеКарты.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") И Не ТарифицированнаяЗона Тогда
    //	ДанныеОснования = РегистрыСведений.ЖурналСобытийСКУД_КОРП.ПолучитьОснованиеПрохода(ДанныеКарты.ВладелецКарты, КодКарты);
    //	Основание     = ДанныеОснования.Основание;
    //	Гость         = ДанныеОснования.Гость;
    //	СоДостпуСЕ    = ДанныеОснования.СоДоступСтруктурнаяЕдиница;
    //	Картоприемник = ДанныеОснования.Картоприемник;
    //КонецЕсли;
    //
    //// Регистриуем проход. Для гостей посещение открывается и закрывается на рецепции.	
    //мДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
    //	
    //Если РегистироватьПроход и ПроходСостоялся и Не Гость Тогда		
    //	Если ТипЗнч(ДанныеКарты.ВладелецКарты) = Тип("СправочникСсылка.Сотрудники") и ПараметрыПодключения.КонтролироватьПроходыСотрудников Тогда
    //		МенеджерОборудованияСКУД.СоздатьПроходСотрудника(СтруктурнаяЕдиница, ДанныеКарты.Карта, Дата, ЭтоВход);
    //	ИначеЕсли Не Гость и ТипЗнч(ДанныеКарты.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") и ПараметрыПодключения.КонтролироватьПроходыКлиентов Тогда
    //		МенеджерОборудованияСКУД.СоздатьПроходКлиента(СтруктурнаяЕдиница, ДанныеКарты.ВладелецКарты, ДанныеКарты.Карта, Дата, ЭтоВход, Основание, НеСоздаватьНовоеПосещение, Картоприемник);
    //	КонецЕсли;		
    //КонецЕсли;
    //
    //// Добавляем запись прохода, для оповещения мониторинга клиентов.
    //Если РегистироватьПроход и ПроходСостоялся и ТипЗнч(ДанныеКарты.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") и ПараметрыПодключения.ОтображатьФотоКлиента Тогда		
    //	
    //	МенеджерОборудованияСКУД.СоздатьЗаписьДляОповещенияМониторингаКлиента(СтруктурнаяЕдиница, ПараметрыПодключения.СписокРабочихМест, ДанныеКарты.ВладелецКарты, ЭтоВход);
    //	
    //КонецЕсли;
    //
    //ОшибкаТарификации = "";
    //
    //Если ТарифицированнаяЗона И НЕ ЭтоВход Тогда
    //		
    //	СтруктураДанные = Новый Структура();		
    //	СтруктураДанные.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
    //	СтруктураДанные.Вставить("ДатаВыхода"        , Дата);                
    //	СтруктураДанные.Вставить("Клиент"            , ДанныеКарты.ВладелецКарты);                   
    //	СтруктураДанные.Вставить("КодКарты"          , КодКарты);                  
    //	СтруктураДанные.Вставить("Помещение"         , ?(МассивПомещений.Количество() > 0, МассивПомещений[0], Неопределено));                 
    //	СтруктураДанные.Вставить("Услуга"            , УслугаТариф);                   
    //	СтруктураДанные.Вставить("ВидЦен"            , ВидЦенТариф);                    
    //	СтруктураДанные.Вставить("Турникет"          , Формат(НомерТочки, "ЧГ="));                  
    //	СтруктураДанные.Вставить("ОплачиватьСЛС"     , ОплатаЛСТариф); 	
    //	
    //	РезультатОперации = МенеджерОборудованияСКУД.СоздатьЗанятиеТарификации(СтруктураДанные); 		
    //	
    //	Если РезультатОперации.Результат Тогда
    //		Основание = РезультатОперации.Занятие;
    //	Иначе
    //		ОшибкаТарификации = ", " + РезультатОперации.ОписаниеОшибки;
    //	КонецЕсли;  		
    //	
    //КонецЕсли;
    //
    //мДатаКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
    //ВремяВыполнения = (мДатаКонца - мДатаНачала) /1000;
    //
    //// Фиксируем проход через турникет в журнале событий.
    //Описание  = ?(Гость, "Гость. ", "") + ?(ПроходСостоялся, "Зарегистрирован проход", "Проход не выполнен") + ОшибкаТарификации;
    //ЛогироватьСобытие(СтруктурнаяЕдиница, Дата, ?(ПроходСостоялся, 2, 3), КодКарты, ДанныеКарты.Карта, НомерТочки, НаименованиеУстройства, ЭтоВход, Описание, Основание, ВремяВыполнения, Гость,,,,СоДостпуСЕ, Картоприемник);
    //
    //Возврат Истина;      	
    //
КонецФункции

// Процедура, записывает событие в журнал.
//
Процедура ЛогироватьСобытие(СтруктурнаяЕдиница
	                       ,Дата
						   ,ТипСобытия          = Неопределено
						   ,КодКарыт            = Неопределено
						   ,Карта               = Неопределено
						   ,Устройство          = Неопределено						   
						   ,Наименование        = Неопределено
						   ,Направление         = Неопределено
						   ,Описание            = Неопределено
						   ,Основание           = Неопределено
						   ,ВремяВыполнения     = Неопределено
						   ,Гость               = Неопределено
						   ,Помещение           = Неопределено
						   ,СоДоступИДКлиент    = Неопределено
						   ,СоДоступИДОснование = Неопределено
						   ,СоДоступСтруктурнаяЕдиница = Неопределено
						   ,ЭтоКартоприемник    = Неопределено)
	
	РегистрыСведений.ЖурналСобытийСКУД_КОРП.ЗаписатьСобытиеВЖурнал(Дата, ТипСобытия, КодКарыт, Карта, Устройство, Помещение, Направление, Описание, Основание, ВремяВыполнения, Гость, СтруктурнаяЕдиница, СоДоступИДКлиент, СоДоступИДОснование, СоДоступСтруктурнаяЕдиница, ЭтоКартоприемник, Наименование);	
	                  
КонецПроцедуры

// Функция, возвращает HTTP ответ 1с.
//
Функция СформироватьОтвет(Ответ1С)

	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);		
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);			
	ЗаписатьJSON(ЗаписьJSON, Ответ1С);		
	JSONОтвет = ЗаписьJSON.Закрыть();
	
	HTTPОтвет = Новый HTTPСервисОтвет(200);
	HTTPОтвет.УстановитьТелоИзСтроки(JSONОтвет);
	HTTPОтвет.Заголовки["Content-Type"] = "application/json";
	
	Возврат HTTPОтвет;
	
КонецФункции

// Функция, конвертирует код карты.
//
Функция КонвертироватьКодКарты(КодКраты)	

	ПерваяЧасть = Сред(КодКраты, СтрДлина(КодКраты) - 5, 2); 
	ВтораяЧасть = Сред(КодКраты, СтрДлина(КодКраты) - 3);
	ч1 = Формат(Конвертировать_16_В_10_СС(ПерваяЧасть), "ЧГ=");	
	ч2 = Формат(Конвертировать_16_В_10_СС(ВтораяЧасть), "ЧГ=");
	Пока СтрДлина(ч1) < 3 Цикл
		ч1 = "0" + ч1;  
	КонецЦикла;
	Пока СтрДлина(ч2) < 5 Цикл
		ч2 = "0" + ч2;  
	КонецЦикла;	
	
	КодКарты1с = ч1 + ","+ч2;

	Возврат КодКарты1с;  
	
КонецФункции

// Функция, конвертирует значение.
//
Функция Конвертировать_16_В_10_СС(Знач Значение)
	
	Шаблон = "0123456789ABCDEF";
	
    Значение = ВРег(Значение); // на всякий случай.
    ДлинаШаблона = СтрДлина(Шаблон);

    ДлинаСтроки = СтрДлина(Значение);
    Результат = 0;

    Для ТекСимвол = 1 По ДлинаСтроки Цикл
        ОбрабатываемыйСимвол = Сред(Значение, ТекСимвол,1);
        ПозицияВШаблоне = Найти(Шаблон, ОбрабатываемыйСимвол)-1;
        Результат = Результат * ДлинаШаблона + ПозицияВШаблоне;
    КонецЦикла;

    Возврат(Результат);

КонецФункции

#КонецОбласти

#Область СинхронизацияФото

// Функция, возвращает список клиентов для синхронизации.
//
Функция GetClientsPOST(ЗапросHTTP)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработчикДрайвера   = Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСКУДSigur_КОРП;
	ПараметрыПодключения = МенеджерОборудованияСКУД.ПолучитьПараметрыПодключенияСКУД(ОбработчикДрайвера);
	
		ЗаписьЖурналаРегистрации("Sigur-GetClients", УровеньЖурналаРегистрации.Информация,,,Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'"));
	
	Если ПараметрыПодключения = Неопределено Тогда
		
		ЗаписьЖурналаРегистрации("Sigur", УровеньЖурналаРегистрации.Информация,,,"Не заданы настройки СКУД!");
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("type", "NOT_CHANGED");
		
		Возврат СформироватьОтвет(СтруктураВозврата);
		
	КонецЕсли;
	
	Если Не ПараметрыПодключения.СинхронизироватьФото Тогда
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("type", "NOT_CHANGED");
		
		Возврат СформироватьОтвет(СтруктураВозврата);
		
	КонецЕсли;
	
	ТекстJSON = ЗапросHTTP.ПолучитьТелоКакСтроку();
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		ПараметрыJSON = ПрочитатьJSON(ЧтениеJSON);
	Исключение		
		ЗаписьЖурналаРегистрации("Sigur", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка формата JSON при получение клиентов " + Символы.ПС + ТекстJSON);		
		Возврат Новый HTTPСервисОтвет(400);		
	КонецПопытки;
	
	// Это подтверждение обработки пакета Sigur.
	Если ПараметрыJSON.Свойство("partialConfirmedBatchId") Тогда
		
		// Удаляем из регистра изменения.                		
		НаборЗаписей = РегистрыСведений.ОбновлениеДанныхБиометрии_КОРП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УИДПакета.Установить(Новый УникальныйИдентификатор(ПараметрыJSON.partialConfirmedBatchId));
		НаборЗаписей.Записать(); 		
				
	КонецЕсли;
	
	УИДПакета = Новый УникальныйИдентификатор();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбновлениеДанныхБиометрии.Объект КАК Объект,
	|	ОбновлениеДанныхБиометрии.УИДПакета КАК УИДПакета,
	|	ОбновлениеДанныхБиометрии.Карта КАК Карта,
	|	ОбновлениеДанныхБиометрии.Наименование КАК Наименование,
	|	ОбновлениеДанныхБиометрии.КодКарты КАК КодКарты,
	|	ОбновлениеДанныхБиометрии.Идентификатор КАК Идентификатор,
	|	ОбновлениеДанныхБиометрии.ВерсияФото КАК ВерсияФото
	|ИЗ
	|	РегистрСведений.ОбновлениеДанныхБиометрии_КОРП КАК ОбновлениеДанныхБиометрии";
	
	ТаблицаКлиентов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаКлиентов.Количество() = 0 Тогда
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("type", "NOT_CHANGED");
		
		Возврат СформироватьОтвет(СтруктураВозврата);
		
	КонецЕсли;
	
	МассивКлиентов = Новый Массив;
	
	Для Каждого СтрокаТЧ из ТаблицаКлиентов Цикл
		
		ДанныеКлиента = Новый Структура;
		ДанныеКлиента.Вставить("i" , Строка(СтрокаТЧ.Идентификатор));
		ДанныеКлиента.Вставить("n" , СтрокаТЧ.Наименование);
		ДанныеКлиента.Вставить("c" , ?(ТипЗнч(СтрокаТЧ.Объект) = Тип("СправочникСсылка.Сотрудники"), ПараметрыПодключения.ПапкаСотрудников, ПараметрыПодключения.ПапкаКлиентов));
		ДанныеКлиента.Вставить("ph", Формат(СтрокаТЧ.ВерсияФото, "ЧГ="));
		ДанныеКлиента.Вставить("k" , СтрокаТЧ.КодКарты);
		
		МассивКлиентов.Добавить(ДанныеКлиента);
		
		МенеджерЗаписи = РегистрыСведений.ОбновлениеДанныхБиометрии_КОРП.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
		МенеджерЗаписи.Прочитать();		
		МенеджерЗаписи.УИДПакета = УИДПакета;  		
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
	СтруктураКлиентов = Новый Структура;
	СтруктураКлиентов.Вставить("type","PARTIAL_UPDATE");
	СтруктураКлиентов.Вставить("partialBatchId", Строка(УИДПакета));
	СтруктураКлиентов.Вставить("d", МассивКлиентов);
	
	Возврат СформироватьОтвет(СтруктураКлиентов);
	
КонецФункции

// Функция, возвращает фото клиента.
//
Функция GetPhotoPOST(ЗапросHTTP)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстJSON = ЗапросHTTP.ПолучитьТелоКакСтроку();
	
	ЗаписьЖурналаРегистрации("Sigur-GetPhoto", УровеньЖурналаРегистрации.Информация,,,Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'") + Символы.ПС + ТекстJSON);
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		ПараметрыJSON = ПрочитатьJSON(ЧтениеJSON);
	Исключение		
		ЗаписьЖурналаРегистрации("Sigur", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка формата JSON при получение фото " + Символы.ПС + ТекстJSON);		
		Возврат Новый HTTPСервисОтвет(400);		
	КонецПопытки;	
	
	Объект = ПолучитьСсылкуОбъектаПоУИД(ПараметрыJSON.i, "Справочники", "Контрагенты");
	Если Объект = Неопределено Тогда
		Объект = ПолучитьСсылкуОбъектаПоУИД(ПараметрыJSON.i, "Справочники", "Сотрудники");
		Если Объект = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Sigur", УровеньЖурналаРегистрации.Ошибка,,, "Клиент не найден, при получение фото " + Символы.ПС + ПараметрыJSON.i);		
			Возврат Новый HTTPСервисОтвет(400);				
		КонецЕсли;		
	КонецЕсли;	
	
	ДвоичныеДанныеФайла = ПолучитьФайлКартинки(Объект.ФайлКартинки);	
	
	Ответ = Новый HTTPСервисОтвет(200);	
	Ответ.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеФайла);
	
	Возврат Ответ;
	
КонецФункции

// Функция, возвращает двоичные данные фото.
//
Функция ПолучитьФайлКартинки(ВерсияСсылка)	
	
	//ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	//
	//Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
	//	Если НЕ ВерсияСсылка.Том.Пустая() Тогда
	//		ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
	//		Попытка
	//			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);				
	//		Исключение				
	//			ДвоичныеДанные = Неопределено;
	//		КонецПопытки;
	//	КонецЕсли;
	//Иначе
	//	ХранилищеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
	//	ДвоичныеДанные = ХранилищеФайла.Получить();
	//КонецЕсли;
	//
	//Возврат ДвоичныеДанные;
	
	Возврат РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(ВерсияСсылка).ДвоичныеДанные;
	
КонецФункции

// Функция, возвращает ссылку по УИД.
//
Функция ПолучитьСсылкуОбъектаПоУИД(УИД, ВидОбъекта, ИмяОбъекта)
	
	Попытка
		ИмяТаблицы = ВидОбъекта;
		Выполнить("ВидОбъекта = " + ВидОбъекта);
		Ссылка = ВидОбъекта[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеДанные.Ссылка КАК Ссылка
		|ИЗ
		|	[ИмяТаблицы] КАК ТекущиеДанные
		|ГДЕ
		|	ТекущиеДанные.Ссылка = &Ссылка";
		
		ИмяТаблицы = Сред(ИмяТаблицы, 1, СтрДлина(ИмяТаблицы) - 1);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяТаблицы]", ИмяТаблицы + "." + ИмяОбъекта);
		
		Если Запрос.Выполнить().Пустой() Тогда
			Ссылка = Неопределено;
		КонецЕсли;		
		
	Исключение
		Ссылка = Неопределено;
	КонецПопытки;
	
	Возврат Ссылка;
	
КонецФункции

// Функция, возвращает результат распознавания лица.
//
Функция РаспознатьЛицоRX(ОбъектПроверки, Камера, ПараметрыПодключения)
	
	Сервер				 = ПараметрыПодключения.Сервер;
	Токен				 = ПараметрыПодключения.Токен;
	Порт				 = ПараметрыПодключения.Порт;
	ЗащищенноеСоединение = ?(ПараметрыПодключения.ИспользоватьSSL, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
	
	Попытка
		
		HTTPСоединение = Новый HTTPСоединение(Сервер, Порт,,,,, ЗащищенноеСоединение);
		ЗаголовкиHTTP = Новый Соответствие;
		ЗаголовкиHTTP.Вставить("token", Токен);
		
		HTTPЗапрос = Новый HTTPЗапрос("/api/v1.2/video-stream-verifications/verify", ЗаголовкиHTTP);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("personId", Строка(ОбъектПроверки.УИДСинхронизации));
		СтруктураДанные.Вставить("cameraId", Строка(Камера));
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);		
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
		ЗаписатьJSON(ЗаписьJSON, СтруктураДанные);
		
		ТекстЗапроса = ЗаписьJSON.Закрыть();
		
		HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса);
		
		Запрос = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		ТекстОтвета = Запрос.ПолучитьТелоКакСтроку();
		
		Если Запрос.КодСостояния = 400 Тогда
			ВызватьИсключение "Доступ запрещен, не удалось проверить фото";
		КонецЕсли;	
		
		Возврат "";
				
	Исключение
		
		Возврат ОписаниеОшибки();
		
	КонецПопытки;
	
КонецФункции

// Фунция, возвращает булево значение использования распознавателя лиц.
//
Функция ПолучитьПараметрыПодключенияКСервису(idКамеры)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Параметры КАК Параметры,
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ДрайверОборудования.ИмяПредопределенныхДанных = ""ДрайверРаспознаваниеЛицRecognitionX_КОРП""
	|	И ПодключаемоеОборудование.УстройствоИспользуется
	|	И НЕ ПодключаемоеОборудование.ПометкаУдаления");
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПодключения = Новый Структура;
	Для Каждого СтрокаТЧ Из Результат Цикл
		Параметры = СтрокаТЧ.Параметры.Получить();
		Для Каждого СтрокаМ Из Параметры.СписокКамер Цикл
			Если СтрокаМ.id = idКамеры Тогда
				ПараметрыПодключения.Вставить("Параметры", Параметры);
				Возврат ПараметрыПодключения;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
					
КонецФункции

#КонецОбласти

#Область CheckInTerminal

// Функция, возвращает html страницу терминала регистрации.
//
Функция CheckInTerminalGET(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации("Sigur-CheckInTerminal", УровеньЖурналаРегистрации.Информация,,,Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'"));
	
	ИдТерминала = Запрос.ПараметрыURL["terminal_id"];	
	Метод       = Запрос.ПараметрыURL["method"];	
	
	Дата = ТекущаяДатаСеанса();
	
	//Дата = НачалоДня(Дата) + 3600;
	
	ПараметрыТерминала = МенеджерОборудованияСКУД.ПолучитьПараметрыТерминала(ИдТерминала);
	Если ПараметрыТерминала = Неопределено Тогда
		Метод = "error"; 		
	КонецЕсли;
	
	Метод = ВРег(Метод);
	
	КодСостояния = 200;
	Если Метод = ВРег("schedule") Тогда                                                           
		
		ТекстHTML = МенеджерОборудованияСКУД.ПолучитьСтраницуТерминала(Дата, ПараметрыТерминала);			
		
	ИначеЕсли Метод = ВРег("chek_in") Тогда
		
		КодКарты = Запрос.ПараметрыЗапроса.Получить("card");
		
		Если ПараметрыТерминала.Свойство("МенятьБайтыМестами") И ПараметрыТерминала.МенятьБайтыМестами Тогда
			
			Если НЕ СтрДлина(КодКарты)%2 = 0 Тогда
				КодКарты = "0" + КодКарты;
			КонецЕсли;
			
			мКодКарты = КодКарты;
			КодКарты = "";
			
			Пока СтрДлина(мКодКарты) > 0 Цикл
				КодКарты = КодКарты + Сред(мКодКарты, СтрДлина(мКодКарты) - 1, 2);
				мКодКарты = Сред(мКодКарты, 1,  СтрДлина(мКодКарты) - 2);
			КонецЦикла;
			
			Если СтрДлина(КодКарты) = 14 Тогда
				КодКарты = Сред(КодКарты, 7) + Сред(КодКарты, 1, 6);
			КонецЕсли; 
			//Если СтрДлина(КодКарты) = 14 Тогда
			//	КодКарты = Сред(КодКарты, 9) + Сред(КодКарты, 1, 8)
			//КонецЕсли;			
		КонецЕсли;
		
		ТекстHTML = МенеджерОборудованияСКУД.РегистрацияНаЗанятие(Дата, ПараметрыТерминала, КодКарты);
		
	ИначеЕсли Метод = ВРег("error") Тогда
		ТекстHTML = "Не заданы настройки терминала";//МенеджерОборудованияСКУД.ПолучитьHTMLИнфоТерминалаОшибка();
		КодСостояния = 400;
	ИначеЕсли Метод = ВРег("test") Тогда
		ТекстHTML = "";		
	КонецЕсли;
	
	HTTPОтвет = Новый HTTPСервисОтвет(КодСостояния);
	HTTPОтвет.УстановитьТелоИзСтроки(ТекстHTML, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Использовать);
	HTTPОтвет.Заголовки["Content-Type"] = "text/html";
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция CheckGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);   
	ЗаписьЖурналаРегистрации("Sigur-CheckGET", УровеньЖурналаРегистрации.Информация,,,Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'"));
	Возврат Ответ;
КонецФункции

#КонецОбласти


